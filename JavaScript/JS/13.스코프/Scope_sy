# 스코프(Scope)

**식별자(변수이름, 함수 이름, 클래스 이름)가 유효한 범위** 

**자신이 선언된 위치에 의해** 다른 코드가 식별자를 참조할 수 있는 유효 범위가 결정된다. 

```jsx
function add(x,y){
	console.log(x,y) // 2 5
	return x+y; 
}
add(2,5);
console.log(x,y); //ReferenceError: x is not defined
```

코드의 바깥 영역과 함수 내부에 같은 이름을 가진 x변수가 있다. 

식별자 결정: 자바스크립트 엔진이 이름이 같은 두 개의 변수 중 어떤 변수를 참조해야 할지를 결정하는 것 

**⇒ 스코프** = 식별자를 검색할 때 사용하는 규칙 

자바스크립트 엔진은 코드의 문맥(코드가 어디서 실행되며 주변에 어떤 코드가 있는가)= 렉시컬 환경lexical Environment)를 고려하여 판단함.

모든 코드는 실행 컨텍스트에서 평가되고 실행됨. 

```jsx
var x = 'global'; //어디서든 참조 가능(전역 스코프)

function foo(){
	var x = 'local'; //foo 함수 내부에서만 참조 가능 
	console.log(x)
}
foo();

console.log(x)
```

식별자는 유일해야함 ⇒ 스코프가 없다면 이름 중복 불가능 ⇒ 스코프를 통해 변수 이름의 충돌을 방하여 사용해야 함 

= 스코프 내에서 식별자는 유일해야 하지만, 다른 스코프에는 같은 이름을 사용 가능하다. 

스코프 = nameSpace 

var 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언이 허용되므로, 의도치 않게 변수값이 재할당되어 변경되는 부작용이 있을 수 있다. 

```jsx
function foo() {
	var x = 1; 
	var x = 2; //자바스크립트 엔진에 의해 위의var키워드가 없는것처럼 동작 
	console.log(x); //2 
} 
foo()
```

let 이나 const 키워드로 선언된 변수는 같은 스코프 내에서 중복을 허용하지 않는다. 

```jsx
function bar(){
	let x =1; 
	let x = 2; // SyntaxError: Identifier 'x' has been already declared
}
```

## 스코프의 종류

변수는 자신이 선언된 위치에 의해 자신이 유효한 범위(스코프)가 결정된다. 

전역에서 선언된 변수=전역 스코프를 갖는 전역 변수 

지역에서 선언 = 지역스코프를 갖는 지역변수

- 전역 스코프
    - 전역: 코드의 가장 바깥 영역
    - 어디서든 참조 가능하다 (함수 내부에서도 ok)
- 지역 스코프
    - 지역: 함수 내부 (인데 let const있어서 + 블록으로도 볼 수 있을듯 )
    - 자신이 선언된 지역과 하위 지역(중첩함수)에서만 참조할 수 있음 (지역+하위지역 스코프에서 유효)

```jsx
var x = "global x"
var y = "global y" 

function outer(){
	var z = "outer's local z"
	
	console.log(x);  //global x
	console.log(y);  //global y
	console.log(z);  //outer's local z 
	
	function inner(){
		var x = "inner's local x"; 
		
		console.log(x); //inner's local x
		//같은 이름의 전역변수가 있으나 inner함수 내부에서 선언된 x참조
		//자바스크립트 엔진이 스코프 체인을 통해 참조할 변수를 검색했기 때문 
		console.log(y); //global y 
		console.log(z); //outer's local z
	}
	inner(); 
}

outer(); 

console.log(x); //global x 
console.log(z); //지역변수를 함수 외부에서 참조: RefferenceError: z is not defined
```

inner함수의 상위 스코프 = outer함수의 지역 스코프 

outer함수의 상위 스코프 = 전역 스코프 

![Untitled](%E1%84%89%E1%85%B3%E1%84%8F%E1%85%A9%E1%84%91%E1%85%B3(Scope)%200a7df0e680964cc894cf9e0755e03439/Untitled.png)

위 코드의 스코프 체인은

- 최상위 스코프인 전역 스코프
- 전역에서 선언된 outer함수의 지역 스코프
- inner함수의 지역 스코프

로 이루어졌다. 

inner함수가 x참조한 방법: inner함수의 지역 스코프에서 x가 선언되었는지 검색 ⇒ 선언된 x변수 존재⇒ 해당변수 참조후 검색종료 

inner함수가 y참조한 방법: inner함수 지역스코프 검색⇒ 존재x⇒ outer함수 지역스코프로 이동해 검색⇒ 존재x⇒ 전역스코프 검색⇒ 선언된 y변수 참조후 검색종료

## 스코프 체인

함수가 중첩될 수 있으므로 스코프도 중첩될 수 있다. (스코프가 함수의 중첩에 의해 계층적 구조를 갖는다) : 외부 함수의 지역 스코프 = 중첩 함수의 상위 스코프  

모든 지역 스코프의 최상위 스코프는 전역 스코프이다. 

**스코프 체인:** 모든 함수는 하나의 계층적 구조로 연결되고, 이렇게 스코프가 계층적으로 연결된것을 의미한다. 

변수를 참조할때 자바스크립트 엔진은 스코프 체인을 통해, 

변수를 참조하는 코드의 스코프에서 시작해서 상위 스코프 방향으로 이동하며 변수를 검색하므로, 

이를 통해 상위 스코프에서 선언한 변수를 하위 스코프에서도 참조할 수 있다.

**스코프 체인은 물리적으로 존재한다!** 

자바스크립트 엔진은 코드를 실행하기에 앞서 위 그림과 유사한 자료구조인 **렉시컬 환경**을 실제로 생성한다. 

- 전역 렉시컬 환경: 코드가 로드되면 바로 생성
- 함수의 렉시컬 환경: 함수가 호출되면 바로 생성

변수 선언이 실행됨 ⇒ 식별자가 렉시컬 환경 자료구조에 키로 등록됨 ⇒ 변수 할당이 일어나면 이 자료구조의 변수 식별자에 해당하는 값을 변경. 

하위 스코프는 상위 스코프에서 유효한 변수 자유롭게 참조가능 

=상위 스코프는 하위 스코프 참조 불가능

=상속과 비슷, 자식은 부모 자산 사용가능, 부모는 자식자산 사용불가능

```jsx
function foo(){
	console.log('global function foo')
}

function bar(){
	function foo(){
		console.log('global function foo')
	}
	foo(); //함수를 가리키는 식별자 foo겁색 
	//"식별자에 함수 객체가 할당됨" 외에 일반 객체와 동일
}

bar(); 
```

함수 선언문으로 함수 정의시 런타임 이전에 함수 객체가 먼저 생성됨. 

*함수 이름과 동일한 이름의 식별자를 암묵적으로 선언하고 생성된 함수 객체 할당*

## 함수 레벨 스코프

- C나 자바등의 대부분의 프로그래밍 언어는 함수 몸체뿐 아니라 모든 코드블록이 지역 스코프를 만듦 (블록 레벨 스코프)
- 하지만 var키워드로 선언된 변수는 오로지 함수 내부 몸체만을 지역 스코프로 인정함: **함수레벨 스코프**

```jsx
var x = 1; 

if (true){
	var x =10; //전역변수(중복선언-재할당)
}

console.log(x) //10; 
```

```jsx
var i= 10; 

for(var i=0; i<5; i++){ //전역변수
	console.log(i); //0 1 2 3 4
}
console.log(i) //5
```

 

다만, let const는 블록레벨 스코프를 지원한다. 

### 변수 호이스팅

호이스팅 되면: 변수 선언문이 **스코프의 선두로 끌어올려진것처럼 동작**됨 

선언문 이전에 참조할경우 에러는 안나지만 가독성, 오류 발생할 여지있어서 좋지않음 

```jsx
//1.호이스팅에 의해 foo변수 선언됨 
//2.var 선언- 초기화 같이 이루어짐 => undefined로 초기화  
console.log(foo) //undefined 
//할당
foo = 123; 

console.log(foo)

//변수 선언 런타임 이전에 됨 
var foo; 
```

### 블록 레벨 스코프

let 키워드로 선언한 변수는 모든 코드블록을 지역스코프로 인정함 

```jsx
let foo =1; //전역변수 
{
let foo =2; //지역변수 
let bar =3; //지역변수 
}

console.log(foo); //1
console.log(bar); //ReferenceError: bar is not defined 
```

함수(함수도 코드블록임) 내의 코드 블록은 함수 레벨 스코프에 중첩됨 

```jsx
function foo(){
	let i=100; //함수 레벨 스코프 
		for (let i=1; i<3; i++){ //블록 레벨 스코프
			console.log(i) //1 2 
		}
}
```

## 렉시컬 스코프 /정적 스코프

자바스크립트는 **렉시컬 스코프**를 따른다. 

```jsx
var x =1; 
function foo(){ 
 var x = 10; 
 bar(); // 1또 출력 (bar()함수는 전역에서 선언되었음=> 
//전역 x참조함) 
}

function bar(){ 
	console.log(x) //1 
}

foo();
bar();

//1을 두번 출력 
```

- Dynamic Scope
    - 함수가 호출되는 시점에 동적으로 상위 스코프를 결정함
- Lexical Scope
    - 상위 스코프 동적으로 변화x 함수를 어디서 정의했는지에 따라 상위 스코프를 결정함.
    - 함수가 호출된 위치는 상위 스코프 결정에 어떠한 영향도 x
    - 함수의 상위 스코프 = 자신이 정의된 스코프
    - 생성된 함수 객체는 이렇게 결정된 상위 스코프를 기억한다. 호출될때마다 함수의 상위 스코프를 참조해야하기 때문

자바스크립트를 비롯한 대부분의 프로그래밍 언어는 렉시컬스코프를 따름
